# import lib that we need
# Dataframe
import pandas as pd
from tabulate import tabulate
# import lib for vis plot
import matplotlib
matplotlib.use('TKAgg')
# import GUI
from tkinter import messagebox
from tkinter import *
from tkinter.ttk import *
from tkinter import ttk
import tkinter as tk
import png
#  import filedialog for gui save
from tkinter import filedialog
from PIL import ImageTk, Image
# import backtest lib
from backtesting import Backtest, Strategy
from backtesting.lib import crossover
from backtesting.test import SMA, GOOG , EURUSD

# get list data name
from crypto_list_api_ticker_name import list_a
list_a_copy = list_a

# import request and API data download
from yahoo_fin.stock_info import get_analysts_info
from yahoo_fin.stock_info import *
import yahoo_fin.stock_info as si

######################################################################################################################
# place Holder
selected_strategy = None
# var holder

######################################################################################################################
def crypto_download_data():
    global list_a_copy
    # download data file from API Yahoo Finance
    interval_1d = "1d"
    interval_1wk = "1wk"
    interval_1mo = "1mo"

    data_downloaded = get_data(select_data_name(), start_date=from_date_entry.get(), end_date=to_date_entry.get(), index_as_date=False,
             interval=interval_1d)

    # pass to Data Frame
    df = pd.DataFrame(data_downloaded)
    # set Data Frame Columns
    df.drop(columns='ticker', inplace=True)
    df.rename(columns={'date': 'Date', 'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close',
                       'adjclose': 'Adjclose', 'volume': 'Volume'}, inplace=True)
    df.reset_index(drop=True, inplace=True)

    # open location to save file
    try:
        with filedialog.asksaveasfile(mode='w', defaultextension=".csv") as file:
            df.to_csv(file.name, index=False)

    except AttributeError:
        print("The user cancelled save")


# label change from select button
def select_data_name():
    # get cursor position
    curItem = tree_view_crypto_name.focus()
    text = tree_view_crypto_name.item(curItem)
    label_tree_view.config(text=text['values'])
    # set a = list contain name of crypto that selected
    a = text['values']
    # convert list into string
    a_str = str(a)
    # get rid of string that don't need
    tp = a_str.replace("[","")
    tp2 = tp.replace("]","")
    tp3 = tp2.replace("'","")
    # set attribute select_data_name.text = tp3
    select_data_name.text = tp3
    return select_data_name.text

# Scankey function
def Scankey():
    global q
    val = q.get()

    if val .lower() and val.upper() == '':
        data = list
    else:
        data = []
        for item in list_a_copy:
            if val.lower() in item.lower():
                data.append(item)

    Update(data)

# Update function
def Update(data):
    tree_view_crypto_name.delete(*tree_view_crypto_name.get_children())

    # put new data
    for item in data:
        tree_view_crypto_name.insert('','end', values=item)
        tree_view_crypto_name.update()

# Reset function
def Reset():
    tree_view_crypto_name.delete(*tree_view_crypto_name.get_children())
    for item in list_a_copy:
        tree_view_crypto_name.insert('', 'end', values=item)

##################################################################################################
# label_change_combobox = change label show choose strategy

def label_change_combobox():
    global selected_strategy
    label.config(text=combobox.get())
    # strategies[combobox.get()] need to be value from the combobox as str
    # and str need to be the same in strategies (dict) that point to the class of that strategy
    # combobox.get() = name of strategy in dict that refer to the strategy Class
    selected_strategy = strategies[combobox.get()]
    print(strategies[combobox.get()])

# label_data_change_from_file_select
def label_data_change_from_file_select():
    label_data.config(text=ask_choose_file())


###################################################################################################
# strategy
class SmaCross(Strategy):

    def init(self):
        price = self.data.Close
        self.ma1 = self.I(SMA, price, 10)
        self.ma2 = self.I(SMA, price, 20)

    def next(self):
        if crossover(self.ma1, self.ma2):
            self.buy()
        elif crossover(self.ma2, self.ma1):
            self.sell()


class Sma4Cross(Strategy):
    n1 = 50
    n2 = 100
    n_enter = 50#20
    n_exit = 25#10

    def init(self):
        self.sma1 = self.I(SMA, self.data.Close, self.n1)
        self.sma2 = self.I(SMA, self.data.Close, self.n2)
        self.sma_enter = self.I(SMA, self.data.Close, self.n_enter)
        self.sma_exit = self.I(SMA, self.data.Close, self.n_exit)

    def next(self):

        if not self.position:

            # On upwards trend, if price closes above
            # "entry" MA, go long

            # Here, even though the operands are arrays, this
            # works by implicitly comparing the two last values
            if self.sma1 > self.sma2:
                if crossover(self.data.Close, self.sma_enter):
                    self.buy()

            # On downwards trend, if price closes below
            # "entry" MA, go short

            else:
                if crossover(self.sma_enter, self.data.Close):
                    self.sell()

        # But if we already hold a position and the price
        # closes back below (above) "exit" MA, close the position

        else:
            if (self.position.is_long and
                    crossover(self.sma_exit, self.data.Close)
                    or
                    self.position.is_short and
                    crossover(self.data.Close, self.sma_exit)):
                self.position.close()

###################################################################################################
# dict contain stg use for selecting stg
strategies = {
    'SmaCross': SmaCross,
    'Sma4Cross': Sma4Cross
             }
###################################################################################################
# make function Run_start Frame

def Run_start():
    global selected_strategy

    bt = Backtest(ask_choose_file.df_content, selected_strategy, cash=10_000, commission=.002,margin=1,trade_on_close=False,hedging=False,
                  exclusive_orders=True)
    stats = bt.run()
    print(stats["_trades"])
    bt.plot()
    Run_start.stats = stats


###################################################################################################
# make func for button to save file to xlsx
def save_file_xlsx():


    ##########################################################
    # make DataFrame to pass data from console to DataFrame
    df = pd.DataFrame(Run_start.stats["_trades"])

    # pop up to ask user to save file use filedialog.asksaveasfile and pass data with panda DataFrame
    try:
        with filedialog.asksaveasfile(mode='w', defaultextension=".xlsx") as file:
            df.to_excel(file.name)
    except AttributeError:
        print("The user cancelled save")
'''
    for data from backtader lib
    # this is to make ref set number according to the number of data rows (set colum ref number 1 - n)
    # because when we run plot and save plot data ref is adding itself so we need to set it according to data rows
    # use for loop to check how many row and then add number to ref from 1 to n accordingly to the rows
    for i in range(len(df.loc[:,'ref'])):
        df.loc[i:i, 'ref'] = i+1
    # set ref as index
    df.set_index('ref',inplace=True)
'''
###################################################################################################
# make func for button ask open file for data use in backtesting


def ask_choose_file():
    # 1). ask file to open and use in the Run_start

    global tree_view_show_data
    try:
        with filedialog.askopenfile(mode='r', filetypes=[('CSV Files', '*.csv'),("Excel files", ".xlsx .xls")]) as file:
                # make data that openwith askopenfile to Dataframe content
                #df_content = pd.read_csv(file,index_col='Date', parse_dates=True) # may add df.read_xlsx later for xlsx content
                df_content = pd.read_csv(file, index_col='Date',
                                         parse_dates=True)  # may add df.read_xlsx later for xlsx content
                # give function this attribute  .df_content for use as variable in Run_start() function
                ask_choose_file.df_content = df_content

    # 2). after load file we get file data and put it into the treeview
                # clear tree
                clear_tree()
                # add data to treeview
                tree_view_show_data['column'] = list(df_content.columns)
                tree_view_show_data['show'] = "headings"
                # Loop thru column list for headers
                for column in tree_view_show_data["column"]:
                    tree_view_show_data.column(column, anchor=CENTER, stretch=NO,minwidth=70,width=100)
                    tree_view_show_data.heading(column, text=column)

                # put data in treeview
                df_content_row = df_content.to_numpy().tolist()
                for row in df_content_row:
                    tree_view_show_data.insert('','end',values=row)
                return file.name
    except AttributeError:
        print("The user cancelled open data file")

# function for clear old tree data
def clear_tree():
    tree_view_show_data.delete(*tree_view_show_data.get_children())
###################################################################################################
###################################################################################################
###################################################################################################

# make window
root = tk.Tk()
q = StringVar()

# Make the app responsive
for index in [0, 1, 2, 3, 4]:
    root.columnconfigure(index=index, weight=1)
    root.rowconfigure(index=index, weight=1)

# set value #### #### #### ###
combo_list = ["Sma4Cross", "SmaCross", "Bollinger Band"]

##############################################################################################################
# Create a Frame for the Strategy
##############################################################################################################
# make Strategy_frame
Strategy_frame = ttk.LabelFrame(master=root, text="Choose Strategy", padding=(20, 10))
Strategy_frame.grid(row=0, column=0,rowspan=2,
                    padx=(20, 10), pady=(20, 10), sticky="nsew"
                    )

# Text label
label = ttk.Label(master=Strategy_frame, text="Strategy",justify="center",
                  font=("-size", 15, "-weight", "bold")
                  )
label.grid(row=0, column=0,columnspan=2, padx=5, pady=10, sticky="nsew")

# Combobox
selected_name_strategy = tk.StringVar()
combobox = ttk.Combobox(master=Strategy_frame, values=combo_list,
                        textvariable=selected_name_strategy
                        )
combobox.current(0)
combobox['state'] = 'readonly'
combobox.grid(row=1, column=0, padx=5, pady=10, sticky="ew")
combobox.bind('<<ComboboxSelected>>')
#######################################################
# Button for Strategy_frame
#######################################################
# Accentbutton_select_strategy
accent_button_select_strategy = ttk.Button(master=Strategy_frame, text="Select Strategy",
                                          style="Accent.TButton"
                                          )
accent_button_select_strategy['command'] = label_change_combobox
accent_button_select_strategy.grid(row=2, column=0, columnspan=2, padx=5, pady=10, sticky="nsew")

# Accentbutton_run_plot_data
accent_button_run_plot_data = ttk.Button(master=Strategy_frame, text="Plot",
                                         style="Accent.TButton"
                                         )
accent_button_run_plot_data['command'] = Run_start
accent_button_run_plot_data.grid(row=3, column=0, columnspan=2, padx=5, pady=10, sticky="nsew")

# Accentbutton_save_plot_data
accent_button_save_plot_data = ttk.Button(master=Strategy_frame, text="Save",
                                          style="Accent.TButton"
                                         )
accent_button_save_plot_data['command'] = save_file_xlsx
accent_button_save_plot_data.grid(row=5, column=0, columnspan=2, padx=5, pady=10, sticky="nsew")


##############################################################################################################
# Create a Frame for the select data
##############################################################################################################
data_frame = ttk.LabelFrame(master=root, text="Select Data To Backtesting", padding=(20, 10))
data_frame.grid(row=0, column=2,rowspan=2,
                    padx=(20, 10), pady=(20, 10), sticky="nsew"
                    )

# Create a label in Frame of select data
label_data = ttk.Label(master=data_frame, text="Data File (.CSV)",justify="center",
                  font=("-size", 15, "-weight", "bold")
                  )
label_data.grid(row=0, column=1,columnspan=2, padx=5, pady=10, sticky="nsew")

######################################
# Create Panedwindow for treeview data
######################################
paned = ttk.PanedWindow(master=data_frame,orient=VERTICAL,width=650)
paned.grid(row=1, column=1, pady=(25, 5), sticky="nsew", rowspan=2)
# Pane # 1
pane_1 = ttk.Frame(paned, padding=5)
paned.add(pane_1, weight=1)
# Pane # 2
pane_1_2 = ttk.Frame(paned, padding=5)
paned.add(pane_1_2, weight=1)

# Scrollbar
scrollbar_y = ttk.Scrollbar(pane_1)
scrollbar_y.pack(side="right", fill="y")
scrollbar_x = ttk.Scrollbar(pane_1)
#scrollbar_x.pack(side="bottom", fill="x")
# Create Treeview for review data we selected
tree_view_show_data = ttk.Treeview(master=pane_1,
                                   selectmode="browse",
                                   yscrollcommand=scrollbar_y.set,
                                   #xscrollcommand=scrollbar_x.set,
                                   columns=("2"),
                                   height=10,

                                   )

tree_view_show_data.pack(expand=True, fill="both")
scrollbar_y.config(command=tree_view_show_data.yview)
#scrollbar_x.config(command=tree_view_show_data.xview)





# Accentbutton_select_data_file
accent_button_save_plot_data = ttk.Button(master=pane_1_2, text="select data file",
                                          style="Accent.TButton"
                                         )
accent_button_save_plot_data['command'] = ask_choose_file
accent_button_save_plot_data['command'] = label_data_change_from_file_select
#accent_button_save_plot_data.grid(row=6, column=0, columnspan=2, padx=5, pady=10, sticky="nsew")
accent_button_save_plot_data.pack(expand=False,padx=5,pady=5, fill="both")



##############################################################################################################
# Create a Frame for the download data from API
##############################################################################################################

# make download_data_frame
download_data_frame = ttk.LabelFrame(master=root, text="Download Data From API", padding=(20, 10))
download_data_frame.grid(row=0, column=4,rowspan=2,columnspan=2,
                    padx=(20, 10), pady=(20, 10), sticky="nsew"
                    )

# Text label download_data_frame
label_tree_view = ttk.Label(master=download_data_frame, text="Trading pairs",justify="center",
                  font=("-size", 15, "-weight", "bold")
                  )
label_tree_view.grid(row=0, column=0,columnspan=3, padx=5, pady=10, sticky="nsew")


#######################################################
# Create Panedwindow for treeview
#######################################################
paned_2 = ttk.PanedWindow(master=download_data_frame)
paned_2.grid(row=1, column=1, pady=(25, 5), sticky="nsew", rowspan=2)
# Pane # 1
pane_2_1 = ttk.Frame(paned_2, padding=5)
paned_2.add(pane_2_1 , weight=1)
# Pane # 2
pane_2_2 = ttk.Frame(paned_2, padding=5)
paned_2.add(pane_2_2, weight=1)
# Pane # 3
pane_2_3 = ttk.Frame(paned_2, padding=10)
paned_2.add(pane_2_3 , weight=1)

# Scrollbar
scrollbar_y = ttk.Scrollbar(pane_2_1 )
scrollbar_y.pack(side="right", fill="y")

#######################################################
# Treeview
#######################################################
tree_view_crypto_name = ttk.Treeview(master=pane_2_1 ,
                                     yscrollcommand = scrollbar_y.set,
                                     height=10,
                                     selectmode="browse"
                                     )

tree_view_crypto_name.pack(expand=True, fill="both")
scrollbar_y.config(command=tree_view_crypto_name.yview)

# Columns
tree_view_crypto_name['columns'] = ('Crypto/USD')
tree_view_crypto_name.column('#0', width=0, stretch=NO)
tree_view_crypto_name.column('Crypto/USD')

tree_view_crypto_name.heading('#0', text='', anchor=CENTER)
tree_view_crypto_name.heading('Crypto/USD', text='Crypto/USD', anchor=CENTER)

# pass data in to treeview
for item in list_a_copy:
    tree_view_crypto_name.insert('', 'end', values=item)

#######################################################
# Add Buttons into Pane_2 master
#######################################################
# Add entry box

search_entry = ttk.Entry(master=pane_2_2,font=("Helvetica",10),textvariable=q)
search_entry.pack(expand=True,padx=5,pady=5, fill="both")
# Search Button
search_button = ttk.Button(master=pane_2_2,text="Search")
search_button.pack(expand=True,padx=5,pady=5, fill="both",side=LEFT)
search_button['command'] = Scankey
# reset Button
reset_button = ttk.Button(master=pane_2_2,text="Reset")
reset_button.pack(expand=True,padx=5,pady=5, fill="both",side=RIGHT)
reset_button['command'] = Reset


# select name button
select_button = ttk.Button(master=pane_2_3 ,text="Select")
select_button.pack(expand=True,padx=5,pady=5, fill="both")
select_button['command'] = select_data_name

##############################################################################################################
# Create Frame for data download and setting data
##############################################################################################################
# make setting_dataframe
setting_dataframe = ttk.LabelFrame(master=download_data_frame, text="Setting Data", padding=(20, 10))
setting_dataframe.grid(row=5, column=1,rowspan=3,columnspan=2,
                    padx=(10, 10), pady=(10, 10), sticky="nsew"
                    )

# Text label for data download and setting data
label_setting_data = ttk.Label(master=setting_dataframe, text="Setting Data",justify="center",
                  font=("-size", 10, "-weight", "bold")
                  )
label_setting_data.grid(row=0, column=0,columnspan=3, padx=5, pady=5, sticky="nsew")

######################################################
# Button and Entry in  data download and setting data
######################################################
# From date Entry box
from_date_entry = ttk.Entry(master=setting_dataframe,justify=CENTER,font=("-size",10))
from_date_entry.insert(0,"00/00/0000")
from_date_entry.grid(row=1,column=1,columnspan=2,padx=5,pady=5)

# Label from date
label_from_date = ttk.Label(master=setting_dataframe,text="From Date: MM/DD/YYYY",font=("-size", 10,"-weight","bold"),justify=CENTER)
label_from_date.grid(row=0,column=1,columnspan=2,padx=5,pady=5)

# To date Entry box
to_date_entry = ttk.Entry(master=setting_dataframe,justify=CENTER,font=("-size",10))
to_date_entry.insert(0,"00/00/0000")
to_date_entry.grid(row=1,column=3,columnspan=2,padx=5,pady=5)

# Label from date
label_to_date = ttk.Label(master=setting_dataframe,text="To Date: MM/DD/YYYY",font=("-size", 10,"-weight","bold"),justify=CENTER)
label_to_date.grid(row=0,column=3,columnspan=2,padx=5,pady=5)

# Separator
separator_data_setting = ttk.Separator(master=setting_dataframe,orient=VERTICAL)
separator_data_setting.grid(row=0, column=2,columnspan=2, sticky="ns",rowspan=10)

# download button
download_button = ttk.Button(master=setting_dataframe,text="Download Data")
download_button.grid(row=4,column=1,columnspan=2,padx=8,pady=8)
download_button['command'] = crypto_download_data

# interval time combo box
list_of_interval_time = ["1 Day","1 Week","1 Month"]
interval_time_combo_box =ttk.Combobox(master=setting_dataframe,values=list_of_interval_time)
interval_time_combo_box.current(0)
interval_time_combo_box.grid(row=4,column=3,columnspan=2,padx=5,pady=5)





# Simply set the theme after calling frame
root.tk.call("source", "azure.tcl")
root.tk.call("set_theme", "dark")

# Set a minsize for the window, and place it in the middle
root.update()
root.minsize(root.winfo_width(), root.winfo_height())
x_cordinate = int((root.winfo_screenwidth() / 2) - (root.winfo_width() / 2))
y_cordinate = int((root.winfo_screenheight() / 2) - (root.winfo_height() / 2))
root.geometry("+{}+{}".format(x_cordinate, y_cordinate-20))

# run window
root.mainloop()
